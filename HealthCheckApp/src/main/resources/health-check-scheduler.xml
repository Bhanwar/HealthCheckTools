<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mongo="http://www.springframework.org/schema/data/mongo"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
		http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">

	<context:property-placeholder
		location="classpath:healthCheck-scheduler-config.properties,classpath:healthCheck-db-config.properties,classpath:healthCheck-getApi-configValues.properties" />
	<context:component-scan base-package="com.snapdeal.healthcheck.app.*" />

	<!-- Flyway configuration -->
	<beans:bean id="flywayRepair" class="org.flywaydb.core.Flyway"
		init-method="repair">
		<beans:property name="baselineOnMigrate" value="true" />
		<beans:property name="locations" value="classpath:/db/migration/" />
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>
	<beans:bean id="flyway" class="org.flywaydb.core.Flyway"
		init-method="migrate">
		<beans:property name="baselineOnMigrate" value="true" />
		<beans:property name="locations" value="classpath:/db/migration/" />
		<beans:property name="dataSource" ref="dataSource" />
	</beans:bean>

	<mongo:mongo-client id="mongo"
		credentials="${mongo_user}:${mongo_pwd}@${mongo_db}" host="${mongo_host}"
		port="${mongo_port}"></mongo:mongo-client>

	<!-- MongoTemplate for connecting and querying the documents in the database -->
	<beans:bean id="mongoTemplate"
		class="org.springframework.data.mongodb.core.MongoTemplate">
		<beans:constructor-arg name="mongo" ref="mongo" />
		<beans:constructor-arg name="databaseName"
			value="${mongo_db}" />
	</beans:bean>

	<mongo:repositories base-package="com.snapdeal.healthcheck.app.mongo.repositories" />

	<beans:bean id="healthCheckData"
		class="com.snapdeal.healthcheck.app.model.HealthCheckData">
	</beans:bean>

	<beans:bean id="quartzDataObj" class="com.snapdeal.healthcheck.app.model.QuartzJobDataHolder">
	</beans:bean>
	
	<beans:bean id="mongoService"
		class="com.snapdeal.healthcheck.app.mongo.repositories.MongoRepoService">
	</beans:bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<!-- Quartz Job -->
	<beans:bean id="healthCheckJob"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<beans:property name="jobClass"
			value="com.snapdeal.healthcheck.app.scheduler.HealthCheckScheduler" />
		<beans:property name="durability" value="true" />
	</beans:bean>
	<beans:bean id="healthCheckCronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<beans:property name="jobDetail" ref="healthCheckJob" />
		<beans:property name="cronExpression" value="${health_check_cron}" />
	</beans:bean>

	<beans:bean id="dailyReportJob"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<beans:property name="jobClass"
			value="com.snapdeal.healthcheck.app.scheduler.ReportScheduler" />
		<beans:property name="durability" value="true" />
	</beans:bean>
	<beans:bean id="dailyReportCronTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<beans:property name="jobDetail" ref="dailyReportJob" />
		<beans:property name="cronExpression" value="${daily_report_cron}" />
	</beans:bean>

	<beans:bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="${jdbc_driverClassName}" />
		<beans:property name="url" value="${jdbc_url}" />
		<beans:property name="username" value="${jdbc_username}" />
		<beans:property name="password" value="${jdbc_password}" />
	</beans:bean>

	<!-- Hibernate session factory -->
	<beans:bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource" />

		<beans:property name="hibernateProperties">
			<beans:props>
				<beans:prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</beans:prop>
				<beans:prop key="hibernate.show_sql">true</beans:prop>
			</beans:props>
		</beans:property>

		<beans:property name="packagesToScan">
			<beans:list>
				<beans:value>com.snapdeal.healthcheck.app.model</beans:value>
			</beans:list>
		</beans:property>

	</beans:bean>

	<beans:bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<beans:property name="sessionFactory" ref="sessionFactory" />
	</beans:bean>

	<beans:bean
		class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<beans:property name="schedulerContextAsMap">
			<beans:map>
				<beans:entry key="data" value-ref="healthCheckData" />
				<beans:entry key="repoService" value-ref="mongoService" />
				<beans:entry key="dataObjects" value-ref="quartzDataObj"></beans:entry>
				<beans:entry key="toAddress" value-type="java.lang.String"
					value="${to_mail_recepients}" />
				<beans:entry key="ccAddress" value-type="java.lang.String"
					value="${cc_mail_recepients}" />
				<beans:entry key="envName" value-type="java.lang.String"
					value="${env_name}" />
			</beans:map>
		</beans:property>
		<beans:property name="jobDetails">
			<beans:list>
				<beans:ref bean="healthCheckJob" />
				<beans:ref bean="dailyReportJob" />
			</beans:list>
		</beans:property>
		<beans:property name="triggers">
			<beans:list>
				<beans:ref bean="healthCheckCronTrigger" />
				<beans:ref bean="dailyReportCronTrigger" />
			</beans:list>
		</beans:property>
		<beans:property name="waitForJobsToCompleteOnShutdown"
			value="true"></beans:property>
		<beans:property name="applicationContextSchedulerContextKey"
			value="applicationContext"></beans:property>
	</beans:bean>


</beans:beans>